{
  "name": "@yaegassy/coc-ruff",
  "version": "0.6.3",
  "description": "ruff-lsp extension for coc.nvim",
  "author": "yaegassy <yosstools@gmail.com>",
  "license": "MIT",
  "main": "lib/index.js",
  "keywords": [
    "coc.nvim",
    "python",
    "python3",
    "linting",
    "ruff",
    "ruff-lsp",
    "coc-ruff",
    "vim",
    "neovim"
  ],
  "engines": {
    "coc": "^0.0.80"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yaegassy/coc-ruff"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "lint": "eslint src --ext ts",
    "clean": "rimraf lib",
    "watch": "node esbuild.js --watch",
    "build": "node esbuild.js",
    "prepare": "node esbuild.js"
  },
  "prettier": {
    "singleQuote": true,
    "printWidth": 120,
    "semi": true
  },
  "devDependencies": {
    "@types/node": "^20.11.17",
    "@types/which": "^2.0.1",
    "@typescript-eslint/eslint-plugin": "^6.21.0",
    "@typescript-eslint/parser": "^6.21.0",
    "coc.nvim": "^0.0.82",
    "esbuild": "^0.16.17",
    "eslint": "^8.56.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.1.3",
    "prettier": "^3.2.5",
    "rimraf": "^5.0.1",
    "typescript": "^5.3.3",
    "which": "^3.0.0"
  },
  "activationEvents": [
    "onLanguage:python"
  ],
  "contributes": {
    "rootPatterns": [
      {
        "filetype": "python",
        "patterns": [
          "pyproject.toml",
          "ruff.toml",
          ".ruff.toml",
          "setup.py",
          "setup.cfg",
          "tox.ini",
          "Pipfile",
          "requirements.txt"
        ]
      }
    ],
    "configuration": {
      "type": "object",
      "title": "coc-ruff configuration",
      "properties": {
        "ruff.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable coc-ruff extension"
        },
        "ruff.disableDocumentFormatting": {
          "type": "boolean",
          "default": false,
          "description": "Disable document formatting only."
        },
        "ruff.disableHover": {
          "type": "boolean",
          "default": false,
          "description": "Disable hover only."
        },
        "ruff.client.codeAction.showDocumantaion.enable": {
          "type": "boolean",
          "default": false,
          "description": "Whether to display the code action for open the Ruff rule documentation web page included in the diagnostic information."
        },
        "ruff.useDetectRuffCommand": {
          "type": "boolean",
          "default": true,
          "description": "Automatically detects the ruff command in the execution environment and sets `ruff.path`."
        },
        "ruff.autoFixOnSave": {
          "type": "boolean",
          "default": false,
          "description": "Turns auto fix on save on or off."
        },
        "ruff.serverPath": {
          "type": "string",
          "default": "",
          "description": "Custom path to the ruff-lsp command. If not set, the `ruff-lsp` command found in the current Python environment or venv environment will be used."
        },
        "ruff.builtin.pythonPath": {
          "type": "string",
          "default": "",
          "description": "Python 3.x path (Absolute path) to be used for built-in install."
        },
        "ruff.args": {
          "default": [],
          "description": "Additional command-line arguments to pass to `ruff check`, e.g., `\"args\": [\"--config=/path/to/pyproject.toml\"]`. Supports a subset of Ruff's command-line arguments, ignoring those that are required to operate the LSP, like `--force-exclude` and `--verbose`.",
          "items": {
            "type": "string"
          },
          "scope": "resource",
          "type": "array"
        },
        "ruff.lint.args": {
          "default": [],
          "description": "Additional command-line arguments to pass to `ruff check`, e.g., `\"args\": [\"--config=/path/to/pyproject.toml\"]`. Supports a subset of Ruff's command-line arguments, ignoring those that are required to operate the LSP, like `--force-exclude` and `--verbose`.",
          "items": {
            "type": "string"
          },
          "scope": "resource",
          "type": "array"
        },
        "ruff.run": {
          "default": null,
          "description": "Run Ruff on every keystroke (`onType`) or on save (`onSave`).",
          "enum": [
            "onType",
            "onSave"
          ],
          "enumDescriptions": [
            "Run Ruff on every keystroke.",
            "Run Ruff on save."
          ],
          "scope": "window",
          "type": [
            "string",
            null
          ]
        },
        "ruff.lint.run": {
          "default": "onType",
          "description": "Run Ruff on every keystroke (`onType`) or on save (`onSave`).",
          "enum": [
            "onType",
            "onSave"
          ],
          "enumDescriptions": [
            "Run Ruff on every keystroke.",
            "Run Ruff on save."
          ],
          "scope": "window",
          "type": "string"
        },
        "ruff.lint.enable": {
          "default": true,
          "markdownDescription": "Whether to enable linting. Set to `false` to use Ruff exclusively as a formatter.",
          "scope": "window",
          "type": "boolean"
        },
        "ruff.format.args": {
          "default": [],
          "description": "Additional command-line arguments to pass to `ruff format`, e.g., `\"args\": [\"--config=/path/to/pyproject.toml\"]`. Supports a subset of Ruff's command-line arguments, ignoring those that are required to operate the LSP, like `--force-exclude` and `--verbose`.",
          "items": {
            "type": "string"
          },
          "scope": "resource",
          "type": "array"
        },
        "ruff.path": {
          "default": [],
          "description": "Path to a custom `ruff` executable, e.g., `[\"/path/to/ruff\"]`.",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ruff.importStrategy": {
          "default": "fromEnvironment",
          "description": "Strategy for loading the `ruff` executable. `fromEnvironment` picks up Ruff from the environment, falling back to the bundled version if needed. `useBundled` uses the version bundled with the extension.",
          "enum": [
            "fromEnvironment",
            "useBundled"
          ],
          "enumDescriptions": [
            "Use `ruff` from environment, fallback to bundled version only if `ruff` not available in the environment.",
            "Always use the bundled version of `ruff`."
          ],
          "scope": "window",
          "type": "string"
        },
        "ruff.interpreter": {
          "default": [],
          "description": "When set to a path to python executable, extension will use that to launch the server and any subprocess.",
          "scope": "window",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ruff.organizeImports": {
          "default": true,
          "description": "Whether to register Ruff as capable of handling `source.organizeImports` actions.",
          "scope": "window",
          "type": "boolean"
        },
        "ruff.fixAll": {
          "default": true,
          "description": "Whether to register Ruff as capable of handling `source.fixAll` actions.",
          "scope": "window",
          "type": "boolean"
        },
        "ruff.codeAction.fixViolation.enable": {
          "default": true,
          "description": "Whether to display Quick Fix actions to autofix violations.",
          "scope": "window",
          "type": "boolean"
        },
        "ruff.codeAction.disableRuleComment.enable": {
          "default": true,
          "description": "Whether to display Quick Fix actions to disable rules via `noqa` suppression comments.",
          "scope": "window",
          "type": "boolean"
        },
        "ruff.ignoreStandardLibrary": {
          "default": true,
          "markdownDescription": "Whether to ignore files that are inferred to be part of the Python standard library.",
          "scope": "window",
          "type": "boolean"
        },
        "ruff.showNotifications": {
          "default": "off",
          "markdownDescription": "Controls when notifications are shown by this extension.",
          "enum": [
            "off",
            "onError",
            "onWarning",
            "always"
          ],
          "enumDescriptions": [
            "All notifications are turned off, any errors or warning are still available in the logs.",
            "Notifications are shown only in the case of an error.",
            "Notifications are shown for errors and warnings.",
            "Notifications are show for anything that the server chooses to show."
          ],
          "scope": "machine",
          "type": "string"
        },
        "ruff.enableExperimentalFormatter": {
          "default": false,
          "markdownDescription": "Controls whether Ruff registers as capable of code formatting. The Ruff formatter is in an alpha state during which formatting may change at any time.",
          "scope": "machine",
          "type": "boolean"
        },
        "ruff.trace.server": {
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between coc.nvim and the ruff-lsp."
        }
      }
    },
    "commands": [
      {
        "command": "ruff.executeAutofix",
        "title": "Fix all auto-fixable problems"
      },
      {
        "command": "ruff.executeFormat",
        "title": "Format document"
      },
      {
        "command": "ruff.executeOrganizeImports",
        "title": "Format imports"
      },
      {
        "command": "ruff.showOutput",
        "title": "Show ruff output channel"
      },
      {
        "command": "ruff.restart",
        "title": "Restart Server"
      },
      {
        "command": "ruff.builtin.installServer",
        "title": "Install ruff-lsp"
      }
    ]
  },
  "dependencies": {
    "toml": "^3.0.0"
  }
}
