{
  "name": "@yaegassy/coc-ruff",
  "version": "0.3.13",
  "description": "ruff-lsp extension for coc.nvim",
  "author": "yaegassy <yosstools@gmail.com>",
  "license": "MIT",
  "main": "lib/index.js",
  "keywords": [
    "coc.nvim",
    "python",
    "python3",
    "linting",
    "ruff",
    "ruff-lsp",
    "coc-ruff",
    "vim",
    "neovim"
  ],
  "engines": {
    "coc": "^0.0.80"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yaegassy/coc-ruff"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "lint": "eslint src --ext ts",
    "clean": "rimraf lib",
    "watch": "node esbuild.js --watch",
    "build": "node esbuild.js",
    "prepare": "node esbuild.js"
  },
  "prettier": {
    "singleQuote": true,
    "printWidth": 120,
    "semi": true
  },
  "devDependencies": {
    "@types/node": "^18.17.14",
    "@types/rimraf": "^3.0.2",
    "@types/which": "^2.0.1",
    "@typescript-eslint/eslint-plugin": "^6.5.0",
    "@typescript-eslint/parser": "^6.5.0",
    "coc.nvim": "^0.0.82",
    "esbuild": "^0.16.17",
    "eslint": "^8.48.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.0",
    "prettier": "^3.0.3",
    "rimraf": "^3.0.2",
    "typescript": "^5.0.4",
    "which": "^3.0.0"
  },
  "activationEvents": [
    "onLanguage:python"
  ],
  "contributes": {
    "rootPatterns": [
      {
        "filetype": "python",
        "patterns": [
          "pyproject.toml",
          "ruff.toml",
          ".ruff.toml",
          "setup.py",
          "setup.cfg",
          "tox.ini",
          "Pipfile",
          "requirements.txt"
        ]
      }
    ],
    "configuration": {
      "type": "object",
      "title": "coc-ruff configuration",
      "properties": {
        "ruff.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable coc-ruff extension"
        },
        "ruff.disableHover": {
          "type": "boolean",
          "default": false,
          "description": "Disable hover only."
        },
        "ruff.client.codeAction.showDocumantaion.enable": {
          "type": "boolean",
          "default": false,
          "description": "Whether to display the code action for open the Ruff rule documentation web page included in the diagnostic information."
        },
        "ruff.useDetectRuffCommand": {
          "type": "boolean",
          "default": true,
          "description": "Automatically detects the ruff command in the execution environment and sets `ruff.path`."
        },
        "ruff.autoFixOnSave": {
          "type": "boolean",
          "default": false,
          "description": "Turns auto fix on save on or off."
        },
        "ruff.serverPath": {
          "type": "string",
          "default": "",
          "description": "Custom path to the ruff-lsp command. If not set, the `ruff-lsp` command found in the current Python environment or venv environment will be used."
        },
        "ruff.builtin.pythonPath": {
          "type": "string",
          "default": "",
          "description": "Python 3.x path (Absolute path) to be used for built-in install."
        },
        "ruff.logLevel": {
          "default": "error",
          "description": "The log level the extension logs at, defaults to 'error'",
          "enum": [
            "debug",
            "error",
            "info",
            "off",
            "warn"
          ],
          "scope": "window",
          "type": "string"
        },
        "ruff.args": {
          "default": [],
          "description": "Additional command-line arguments to pass to `ruff`, e.g., `\"args\": [\"--config=/path/to/pyproject.toml\"]`. Supports a subset of Ruff's command-line arguments, ignoring those that are required to operate the LSP, like `--force-exclude` and `--verbose`.",
          "items": {
            "type": "string"
          },
          "scope": "resource",
          "type": "array"
        },
        "ruff.path": {
          "default": [],
          "description": "When set to a path to the `ruff` binary, extension will use that.",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ruff.importStrategy": {
          "default": "fromEnvironment",
          "description": "Defines where `ruff` is imported from. This setting may be ignored if `ruff.path` is set.",
          "enum": [
            "useBundled",
            "fromEnvironment"
          ],
          "enumDescriptions": [
            "Always use the bundled version of `ruff`.",
            "Use `ruff` from environment, fallback to bundled version only if `ruff` not available in the environment."
          ],
          "scope": "window",
          "type": "string"
        },
        "ruff.run": {
          "default": "onType",
          "description": "Run Ruff on every keystroke (`onType`) or on save (`onSave`).",
          "enum": [
            "onType",
            "onSave"
          ],
          "enumDescriptions": [
            "Run Ruff on every keystroke.",
            "Run Ruff on save."
          ],
          "scope": "window",
          "type": "string"
        },
        "ruff.interpreter": {
          "default": [],
          "description": "When set to a path to python executable, extension will use that to launch the server and any subprocess.",
          "scope": "window",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ruff.organizeImports": {
          "default": true,
          "description": "Whether to register Ruff as capable of handling `source.organizeImports` actions.",
          "scope": "window",
          "type": "boolean"
        },
        "ruff.fixAll": {
          "default": true,
          "description": "Whether to register Ruff as capable of handling `source.fixAll` actions.",
          "scope": "window",
          "type": "boolean"
        },
        "ruff.codeAction.fixViolation.enable": {
          "default": true,
          "description": "Whether to display Quick Fix actions to autofix violations.",
          "scope": "window",
          "type": "boolean"
        },
        "ruff.codeAction.disableRuleComment.enable": {
          "default": true,
          "description": "Whether to display Quick Fix actions to disable rules via `noqa` suppression comments.",
          "scope": "window",
          "type": "boolean"
        },
        "ruff.enableExperimentalFormatter": {
          "default": false,
          "markdownDescription": "Controls whether Ruff registers as capable of code formatting.",
          "scope": "machine",
          "type": "boolean"
        },
        "ruff.trace.server": {
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between coc.nvim and the ruff-lsp."
        }
      }
    },
    "commands": [
      {
        "command": "ruff.executeAutofix",
        "title": "Fix all auto-fixable problems"
      },
      {
        "command": "ruff.executeOrganizeImports",
        "title": "Format imports"
      },
      {
        "command": "ruff.showOutput",
        "title": "Show ruff output channel"
      },
      {
        "command": "ruff.restart",
        "title": "Restart Server"
      },
      {
        "command": "ruff.builtin.installServer",
        "title": "Install ruff-lsp"
      }
    ]
  },
  "dependencies": {
    "toml": "^3.0.0"
  }
}
